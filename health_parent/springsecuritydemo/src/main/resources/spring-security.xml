<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd
							http://code.alibabatech.com/schema/dubbo
							http://code.alibabatech.com/schema/dubbo/dubbo.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">

    <mvc:annotation-driven></mvc:annotation-driven>
    <context:component-scan base-package="com.itheima.controller"/>


    <!--静态资源 不需要权限控制
    security 不需要权限控制
    pattern  放行的路径
    -->
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/css/**"/>

    <!--放行登录页面和不需要权限认证的页面-->
    <security:http security="none" pattern="/pages/login.html"/>

    <!--
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--
           intercept-url：定义一个拦截规则
           pattern：对哪些url进行权限控制
           access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
                 请求的用户只需拥有其中的一个角色就能成功访问对应的URL
       -->
        <security:intercept-url pattern="/**" access="hasAuthority('delete')"/>


        <!--自定义表单
        login-page 自定义登录页面的路径
        username-parameter 从登录表单中 哪个字段获取 username的值
        password-parameter 从登录表单中 哪个字段获取 password的值
        default-target-url 登录成功之后跳转的页面
        always-use-default-target="true" 登录成功之后 一直往default-target-url跳转
        authentication-failure-url 登录失败跳转的页面
         login-processing-url 处理登录请求
        -->
        <security:form-login
                login-page="/pages/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                authentication-failure-url="/pages/login.html"
                default-target-url="/index.jsp"
                always-use-default-target="true"
        />
        <!--
          csrf：对应CsrfFilter过滤器
          disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true"/>

        <!--自定义退出
        logout-url 退出处理请求
        logout-success-url 退出成功之后 往哪儿跳转
        invalidate-session 清理session 使session失效
        -->
        <security:logout
                logout-url="/logout.do"
                logout-success-url="/pages/login.html"
                invalidate-session="true"/>
    </security:http>

    <!--启用方法权限控制注解-->
    <security:global-method-security pre-post-annotations="enabled"/>

    <!--认证管理器 处理认证流程-->
    <security:authentication-manager>

        <!--认证处理的数据 具体处理流程-->
        <security:authentication-provider user-service-ref="userService">
            <security:password-encoder ref="passwordEncoder"/>
            <!--<security:user-service>
                &lt;!&ndash;
                   user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
                 {noop}：表示当前使用的密码为明文
               &ndash;&gt;
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
            </security:user-service>-->
        </security:authentication-provider>
    </security:authentication-manager>

    <!--提供用户数据-->
    <bean id="userService" class="com.itheima.service.UserService"/>

    <!--加密器-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
</beans>